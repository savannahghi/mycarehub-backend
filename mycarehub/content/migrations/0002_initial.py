# Generated by Django 3.2.16 on 2023-01-18 13:13

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import mycarehub.utils.general_utils


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('content', '0001_initial'),
        ('taggit', '0004_alter_taggeditem_content_type_alter_taggeditem_tag'),
        ('wagtailmedia', '0004_duration_optional_floatfield'),
        ('common', '0002_initial'),
        ('wagtailimages', '0024_index_image_file_hash'),
        ('wagtaildocs', '0012_uploadeddocument'),
    ]

    operations = [
        migrations.AddField(
            model_name='custommedia',
            name='uploaded_by_user',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='uploaded by user'),
        ),
        migrations.AddField(
            model_name='contentview',
            name='content_item',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='content.contentitem'),
        ),
        migrations.AddField(
            model_name='contentview',
            name='organisation',
            field=models.ForeignKey(default=mycarehub.utils.general_utils.default_organisation, on_delete=django.db.models.deletion.PROTECT, related_name='content_contentview_related', to='common.organisation'),
        ),
        migrations.AddField(
            model_name='contentview',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='contentshare',
            name='content_item',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='content.contentitem'),
        ),
        migrations.AddField(
            model_name='contentshare',
            name='organisation',
            field=models.ForeignKey(default=mycarehub.utils.general_utils.default_organisation, on_delete=django.db.models.deletion.PROTECT, related_name='content_contentshare_related', to='common.organisation'),
        ),
        migrations.AddField(
            model_name='contentshare',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='contentlike',
            name='content_item',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='content.contentitem'),
        ),
        migrations.AddField(
            model_name='contentlike',
            name='organisation',
            field=models.ForeignKey(default=mycarehub.utils.general_utils.default_organisation, on_delete=django.db.models.deletion.PROTECT, related_name='content_contentlike_related', to='common.organisation'),
        ),
        migrations.AddField(
            model_name='contentlike',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='contentitemtag',
            name='content_object',
            field=modelcluster.fields.ParentalKey(help_text='Associated content item', on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='content.contentitem'),
        ),
        migrations.AddField(
            model_name='contentitemtag',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_contentitemtag_items', to='taggit.tag'),
        ),
        migrations.AddField(
            model_name='contentitemquestionnaire',
            name='page',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='questionnaires', to='content.contentitem'),
        ),
        migrations.AddField(
            model_name='contentitemmedialink',
            name='featured_media',
            field=models.ForeignKey(help_text='Select or upload an audio or video file. In order to maximize compatibility, please stick to common audio/video formats. For video, H264 encoded MP4 files are recommended. For audio, AAC (Advanced Audio Codec) files are recommended. ', on_delete=django.db.models.deletion.CASCADE, related_name='content_item_media', to='wagtailmedia.media'),
        ),
        migrations.AddField(
            model_name='contentitemmedialink',
            name='page',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='featured_media', to='content.contentitem'),
        ),
        migrations.AddField(
            model_name='contentitemindexpage',
            name='organisation',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='content_contentitemindexpage_related', to='common.organisation'),
        ),
        migrations.AddField(
            model_name='contentitemindexpage',
            name='program',
            field=models.ForeignKey(blank=True, default=mycarehub.utils.general_utils.default_program, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='content_contentitemindexpage_related', to='common.program'),
        ),
        migrations.AddField(
            model_name='contentitemgalleryimage',
            name='image',
            field=models.ForeignKey(help_text='Select or upload an image. Most of these images will be viewed on mobile devices. The ideal image should be large enough to render clearly on high end mobile devices but not so large that it costs a lot of bandwidth to download. One good size guideline to aim for is 800x1200 pixels. This is a guideline, not an iron-clad rule.', on_delete=django.db.models.deletion.PROTECT, related_name='content_item_gallery_images', to='wagtailimages.image'),
        ),
        migrations.AddField(
            model_name='contentitemgalleryimage',
            name='page',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='gallery_images', to='content.contentitem'),
        ),
        migrations.AddField(
            model_name='contentitemdocumentlink',
            name='document',
            field=models.ForeignKey(help_text='Select or upload a PDF document. It is IMPORTANT to limit these documents to PDFs - otherwise the mobile app may not be able to display them properly.', on_delete=django.db.models.deletion.CASCADE, related_name='content_item_documents', to='wagtaildocs.document'),
        ),
        migrations.AddField(
            model_name='contentitemdocumentlink',
            name='page',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='content.contentitem'),
        ),
        migrations.AddField(
            model_name='contentitemcategory',
            name='icon',
            field=models.ForeignKey(blank=True, help_text='An optional icon for the content item category. This will be shown in the user interface so it should be chosen with care.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='content_item_category_icons', to='wagtailimages.image'),
        ),
        migrations.AddField(
            model_name='contentitemcategory',
            name='organisation',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='content_contentitemcategory_related', to='common.organisation'),
        ),
        migrations.AddField(
            model_name='contentitemcategory',
            name='programs',
            field=modelcluster.fields.ParentalManyToManyField(to='common.Program'),
        ),
        migrations.AddField(
            model_name='contentitem',
            name='author',
            field=models.ForeignKey(help_text="The item's author. This will be displayed on the website and apps.", on_delete=django.db.models.deletion.PROTECT, to='content.author'),
        ),
        migrations.AddField(
            model_name='contentitem',
            name='categories',
            field=modelcluster.fields.ParentalManyToManyField(help_text="These are fixed categories (picked from a list set up by the system administrators) that determine what content is presented to readers e.g only content in the 'welcome' category will be shown as welcome content. Each content item must have at least one category.", to='content.ContentItemCategory'),
        ),
        migrations.AddField(
            model_name='contentitem',
            name='hero_image',
            field=models.ForeignKey(blank=True, help_text='An optional banner image. When present, it will be displayed above the content e.g above the article. This makes sense mostly for text articles.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='content_hero_image', to='wagtailimages.image'),
        ),
        migrations.AddField(
            model_name='contentitem',
            name='organisation',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='content_contentitem_related', to='common.organisation'),
        ),
        migrations.AddField(
            model_name='contentitem',
            name='program',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='content_contentitem_related', to='common.program'),
        ),
        migrations.AddField(
            model_name='contentitem',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(help_text='These are labels that you can apply to the content on the basis of your editorial policy. You need to define at least one tag. The choice of tag(s) should be guided by your editorial manual i.e the decisions that have been made about how to label content. ', through='content.ContentItemTag', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='contentbookmark',
            name='content_item',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='content.contentitem'),
        ),
        migrations.AddField(
            model_name='contentbookmark',
            name='organisation',
            field=models.ForeignKey(default=mycarehub.utils.general_utils.default_organisation, on_delete=django.db.models.deletion.PROTECT, related_name='content_contentbookmark_related', to='common.organisation'),
        ),
        migrations.AddField(
            model_name='contentbookmark',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='author',
            name='avatar',
            field=models.ForeignKey(blank=True, help_text='An optional author picture (will be displayed publicly)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='author_image', to='wagtailimages.image'),
        ),
        migrations.AddField(
            model_name='author',
            name='organisation',
            field=models.ForeignKey(default=mycarehub.utils.general_utils.default_organisation, on_delete=django.db.models.deletion.PROTECT, related_name='content_author_related', to='common.organisation'),
        ),
        migrations.AddField(
            model_name='author',
            name='programs',
            field=modelcluster.fields.ParentalManyToManyField(to='common.Program'),
        ),
        migrations.AlterUniqueTogether(
            name='contentview',
            unique_together={('user', 'content_item')},
        ),
        migrations.AlterUniqueTogether(
            name='contentshare',
            unique_together={('user', 'content_item')},
        ),
        migrations.AlterUniqueTogether(
            name='contentlike',
            unique_together={('user', 'content_item')},
        ),
        migrations.AlterUniqueTogether(
            name='contentitemquestionnaire',
            unique_together={('page',)},
        ),
        migrations.AlterUniqueTogether(
            name='contentitemmedialink',
            unique_together={('page', 'featured_media')},
        ),
        migrations.AlterUniqueTogether(
            name='contentitemdocumentlink',
            unique_together={('page', 'document')},
        ),
        migrations.AlterUniqueTogether(
            name='contentbookmark',
            unique_together={('user', 'content_item')},
        ),
    ]
